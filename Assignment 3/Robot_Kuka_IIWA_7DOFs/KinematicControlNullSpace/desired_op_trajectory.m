function out = desired_op_trajectory(u)
%DESIRED_OP_TRAJECTORY generates a desired trajectory in the operational
%space wrt to the wcf
%   u(1):     current simulation time
%   u(2:8):   initial joint position
%   u(9:11):  desired ef position wrt wcf (3x1)
%   u(12:14): desired ef orientation wrt wcf (euler angles ZYZ) (3x1)

% Current simulation time
t=u(1);

% Initial Joint position
Qini=u(2:8);

% Desired EF position
xd_W=u(9:11);

% Desired EF orientation
phid_W=u(12:14);

% Flag to activate the Spline generator
% (1) on:  the desired pose will be generated by the time-based spline
% (2) off: the desired pose will be constant (no spline)
splineFlag=u(15);

% Flag to activate the Circle or Static Position task
% (1) on:  the desired ef position will follow a circle
% (2) off: the desired ef position will be static
% NOTE: if splineFlag=0 then the ef position will be static
circleTask=u(16);

%% Desired Pose
% Kinematic Parameters L1,L2,L3, and L4
L=kukaIIWA7_params;

%HT of the robot base (link 0) w.r.t. wcf (w)
H0_W=eye(4);

% Get the initial ef pose 
[~, HT_W] = getAbsoluteHT_kukaIIWA7(Qini,L, H0_W);

%TODO: get the HT link 7 wrt link 0
H7ini_W = HT_W{9};

%TODO: get the EF position wrt link 0 (initial position)
x7ini_W = H7ini_W(1:3,4);

%TODO: get the initial EF orientation wrt W
R7_W = H7ini_W(1:3,1:3);
%Transform the initial rotation to euler angles ZYZ
%Use the function Model/R2_euler_zyz.m
phi7_W = R2_euler_zyz(R7_W);

% For a constant desired pose
Pd_W=xd_W;
phid=phid_W;

%Circle Task
%radius
r=0.15;
%Frequency
T=10.0;
w=0; % For static position task
%Center
cx=xd_W(1)-r;
cy=xd_W(2);
cz=xd_W(3);

% Spline total time
tf=5;

if circleTask
    w=2*pi/T; % for circle position task
end
% If spline is activated, we will generate a time-based desired pose
if splineFlag
    % Compute the desired EF trajectory (position)
    %Use function Pol5th3DOF.m
    if t<=5
        Pd_W = Pol5th3DOF(x7ini_W,xd_W, 0,tf,t);      
    else        
        dt=t-tf;
        Pd_W(1,1)=r*cos(w*dt)+cx;
        Pd_W(2,1)=r*sin(w*dt)+cy;
        Pd_W(3,1)=cz;
    end
    % Compute the desired EF trajectory (orientation)
    
   phid = Pol5th3DOF(phi7_W,phid_W, 0,tf,t);
   
end


%Convert the desired orientation from euler angles ZYZ to Rotation
%matrix
%Use the function euler_ZYZ_2R.m
Rd_W = euler_ZYZ_2R(phid);

%TODO: Form the the desired EF HT wrt wcf using the time-varying vector Pd_W
%and Rotation Rd_W
Hd_W = [Rd_W,Pd_W;[0 0 0 1]];

% Serilaization of HT, form matrix (4X4) into a vector (16x1). This is
% needed since simulink only works with vectors.
out=[reshape(Hd_W,16,1);Pd_W;phid];

end

